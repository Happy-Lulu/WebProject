<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:c="http://www.springframework.org/schema/c"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">
		
	<!--
		## @Aspect(AspectJ) 애노테이션을 이용한 AOP 구현 과정 ##
		1. spring-aop 라이브러리 의존성을 설정한다.
		   spring-context 라이브러리 의존성을 설정하면 spring-context 가 
		   spring-aop에 의존하기 때문에 자동으로 spring-aop 의존성이 설정된다.
		   
		2. 횡단관심사(로깅처리와 같은 공통기능)를 정의한 Advice와 어느 지점에 Advice를
		   적용할지를 정의한 포인트컷을 모듈화한 애스펙트 클래스를 구현한다.
		   애스펙트 클래스에서 하나의 포인트컷은 하나의 메소드로 정의하며 
		   포인트컷의 이름은 포인트컷으로 정의한 메소드 이름을 사용하면 된다.
		   
		   AspectJ 애노테이션을 사용해 애스펙트 클래스에 @Aspect 애노테이션을
		   적용하고 포인트컷을 정의한 메소드에 @Pointcut 애노테이션을 적용한다.
		   Advice로 사용할 메소드에 @Before(), @After(), @AfterReturning(),
		   @AfterThrowing(), @Around() 등의 애노테이션을 적용한다.
		   
		   Advice와 포인트컷 연결은 Advice를 의미하는 AspectJ 애노테이션인
		   @Before(), @Around()에서 () 안에 AspectJ 포인트컷 지정식을
		   사용해 포인트컷을 연결할 수 있고 이미 포인트컷으로 정의한 메소드 이름을
		   참조해 포인트컷을 Advice에 연결할 수도 있다.
		
		3. <beans> 요소에 aop 네임스페이스를 추가한다.
		
		4. XML 설정 파일에 <aop:asptecj-autoproxy />를 설정한다.
		   AspectJ에서 사용하는 애노테이션을 스캔하기 위해 사용한다.
		
		5. XML 설정 파일에 <context:component-scan basepackage="" />를 설정한다.
		   애플리케이션에 필요한 클래스를 스프링이 스캔하여 자동으로 빈을 생성하고
		   DI 컨테이너에 담을 수 있도록 하기 위해 이 설정이 필요하다. 애플리케이션에서
		   필요한 클래스에 @Component나 스프링이 빈으로 인식하기 위해 필요한
		   애노테이션을 지정해야 스프링이 지정한 패키지의 클래스를 빈으로 생성할 수 있다.
		   이 설정을 사용하지 않는다면 어플리케이션에서 필요한 모든 클래스를 
		   <bean class="" /> 요소를 사용해 스프링 빈으로 설정해야 한다.
	-->
	
	<!-- 
		@AspectJ 기반의 애노테이션 지원을 활성화 하도록 지정하고 있다.
		@AspectJ 기반의 애노테이션 지원이 활성화되면 ApplicationContext에서
		@AspectJ 기반의 애노테이션인 @Aspect가 지정된 애스펙트 클래스를
		스프링이 자동으로 탐지하고 AOP를 설정하는데 사용한다.
		아래의 요소에는 proxy-target-class라는 속성이 있는데 기본 값은 false로
		스프링은 JDK 동적 프록시를 사용해 인터페이스 기반 프록시를 생성하고 이 속성을
		true로 지정하면 스프링은 CGLIB를 사용해 클래스 기반의 프록시를 생성한다.
	-->	
	<aop:aspectj-autoproxy />
	
	<!--
		어플리케이션에서 사용하는 모든 클래스를 스캔하고 빈을 생성하여 DI 컨테이너에 
		담는 데는 <aop:aspectj-autoproxy />만 가지고는 부족하다. 
		스프링에게 어플리케이션에서 필요한 대상객체나 애스펙트 클래스가 스프링 
		컴포넌트라는 것을 알려주기 위해 아래와 같이 추가로 기술해야 한다.
		<context:component-scan base-package=""/>를 설정하지 않으면
		어플리케이션에서 필요한 클래스를 <bean class="" /> 요소를 사용해 빈으로
		설정하고 @Aspect 애노테이션을 지정한 애스펙트 클래스도 빈으로 설정해야 한다.  
	 -->
	<context:component-scan 
			base-package="com.springstudy.ch03.declaration" />
			
	<!-- Annotation으로 bean에 주입될 String 데이터 -->	
	<bean id="name" class="java.lang.String" c:_0="이순신" />
</beans>
